Quick Sort on Linked List
Given the head node of a linked list, sort the list using quick sort.

Input Format
The first line of input contains a single integer n.

The second line of input contains n space seperated integers.

Output Format
Sort the given linked list, using quick sort.

Example 1
Input

3
1 6 2
Output

1 2 6
Explanation

After sorting the nodes, we have 1, 2 and 6.

Example 2
Input

4
1 9 3 8
Output

1 3 8 9
Explanation

After sorting the nodes, we have 1, 3, 8 and 9.

Constraints
1 <= n <= 2*104

Topics
Sorting
Linked lists
Companies



import java.util.*;
class Node {
    int data;
    Node next;

    Node(int key) {
        data = key;
        next = null;
    }
}

class Main {
    static Node head;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
    
        int n = sc.nextInt();
        int a1 = sc.nextInt();
        Node head = new Node(a1);
        addToTheLast(head);

        for (int i = 1; i < n; i++) {
            int a = sc.nextInt();
            addToTheLast(new Node(a));
        }

        Solution abc=new Solution();
        Node node = abc.quickSort(head);

        printList(node);
        System.out.println();
    
        sc.close();
    }

    public static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
    }

    public static void addToTheLast(Node node) {
        if (head == null) {
            head = node;
        } else {
            Node temp = head;
            while (temp.next != null)
                temp = temp.next;
            temp.next = node;
        }
    }
}

class Solution {
    public static Node quickSort(Node node) {
        if (node == null || node.next == null) {
    
            return node;
        }

    
        Node pivot = node;
        node = node.next;

     
        Node smallerHead = null, smallerTail = null;
        Node greaterHead = null, greaterTail = null;

     
        while (node != null) {
            Node next = node.next;
            if (node.data < pivot.data) {
    
                if (smallerHead == null) {
                    smallerHead = node;
                    smallerTail = node;
                } else {
                    smallerTail.next = node;
                    smallerTail = node;
                }
                smallerTail.next = null; 
            } else {
         
                if (greaterHead == null) {
                    greaterHead = node;
                    greaterTail = node;
                } else {
                    greaterTail.next = node;
                    greaterTail = node;
                }
                greaterTail.next = null; 
            }
            node = next;
        }

  
        smallerHead = quickSort(smallerHead);
        greaterHead = quickSort(greaterHead);

    
        if (smallerHead != null) {

            Node temp = smallerHead;
            while (temp.next != null) {
                temp = temp.next;
            }
   
            temp.next = pivot;
            pivot.next = greaterHead;
            return smallerHead;
        } else {

            pivot.next = greaterHead;
            return pivot;
        }
    }
}
